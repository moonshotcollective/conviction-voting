# type Purpose @entity {
#   id: ID!
#   sender: Sender!
#   purpose: String!
#   createdAt: BigInt!
#   transactionHash: String!
# }

type Sender @entity {
  id: ID!
  address: Bytes!
  purposes: [Purpose!] @derivedFrom(field: "sender")
  createdAt: BigInt!
  gaugeCount: BigInt!
}

type Conviction @entity {
  userAddress: String!
  amount: BigInt!
  timestamp: BigInt!
}

type Gauge @entity {
  id: ID!
  currentConvictionId: BigInt!
  totalConvictionStaked: BigInt!
  convictions: [Conviction!]! @derivedFrom(field: "userAddress")
  convictionsByUser: [BigInt!]!
}

type Voter @entity {
  id: ID!
  address: Bytes!
  voteCount: BigInt!
  totalStaked: BigInt!
  votes: [Vote!]! @derivedFrom(field: "voter")
}

type Vote @entity {
  id: ID!
  voteId: BigInt!
  voter: Voter!
  amount: BigInt!
  gaugeId: BigInt!
  createdAt: BigInt!
  transactionHash: String!
}

type RunningVoteRecord @entity {
  id: ID!
  voter: Voter!
  votes: [Vote!]!
  gaugeId: BigInt!
  voteCount: BigInt!
  totalStaked: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
  initialTransactionHash: String!
  latestTransactionHash: String!
}
